@model FindGameModel
@{
    ViewData["Title"] = "FindGame";
}
<style>
.wrapper { background-image: url("https://localhost:44341/picturs/fon.png"); background-size: cover; width: 100vw; height: 100vh; padding-top: 20px; }

    html, body, .container {
        height: 100% !important;
        min-width: 100% !important;
        max-width: 100% !important;
        overflow: hidden;
        margin: 0;
        padding: 0;
    }

    .card {
        margin-top: 20px;
    }

    body {
        overflow: auto; /* добавить полосу прокрутки */
    }

    .tagify {
        width: 100%;
        max-width: 700px;
    }

    .some_class_name {
        background-color: azure;
        margin: 0 auto;
    }
</style>
<div class="wrapper">
    <form class="d-flex">
        <input name='tags'
               class='some_class_name'
               placeholder='Введите теги'
               value='' of Objects)
               data-blacklist='.NET,PHP'>
    </form>
    <div class="d-flex justify-content-around flex-wrap">
        @foreach (Game game in Model.games as Game[])
        {
            <div class="card" style="width: 18rem;">
                <div class="card-body">
                    <h5 class="card-title">Игра: @game.name</h5>
                    <p class="card-text">Теги: @game.tagsStr</p>
                    <p class="card-text">Количество игроков: @game.players/2</p>
                    @if (game.players < 2)
                    {
                        <a href="/Game/Index?id=@game.id" class="btn btn-primary">Присоединиться</a>
                    }
                    else
                    {
                        <a href="#" class="btn btn-secondary btn-lg disabled">Присоединиться</a>
                    }

                </div>
            </div>
        }
    </div>
</div>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/tagify/tagify.min.js"></script>
<script>
    var inputElm = document.querySelector('input[name=tags]'),
        whitelist = JSON.parse('@Model.getJsonListTag'.replaceAll('&quot;', '"')),
        selectlist = JSON.parse('@Model.getJsonListSelTag'.replaceAll('&quot;', '"'));

    tags = '';
    for (i = 0; i < selectlist.length; i++) {
        tags += `${selectlist[i]},`;
    }
    inputElm.value = tags;
    console.log(whitelist);

    function searchGame() {
        console.log(selectlist);
        url = "/FindGame/Index?";
        for (i = 0; i < selectlist.length; i++) {
            url += `&tags=${selectlist[i]}`;
        }
        location.href = url;
    }

    // initialize Tagify on the above input node reference
    var tagify = new Tagify(inputElm, {
        enforceWhitelist: true,

        // make an array from the initial input value
        whitelist: inputElm.value.trim().split(/\s*,\s*/)
    })

    // Chainable event listeners
    tagify.on('add', onAddTag)
        .on('remove', onRemoveTag)
        .on('input', onInput)


    var mockAjax = (function mockAjax() {
        var timeout;
        return function (duration) {
            clearTimeout(timeout); // abort last request
            return new Promise(function (resolve, reject) {
                timeout = setTimeout(resolve, duration || 700, whitelist)
            })
        }
    })()

    // tag added callback
    function onAddTag(e) {
        console.log("original input value: ", inputElm.value);
        selectlist.push(e.detail.data.value);
        searchGame();
    }

    // tag remvoed callback
    function onRemoveTag(e) {
        console.log("onRemoveTag:", e.detail, "tagify instance value:", tagify.value)
        selectlist.splice(selectlist.indexOf(e.detail.data.value), 1);
        searchGame();
    }

    // on character(s) added/removed (user is typing/deleting)
    function onInput(e) {
        tagify.settings.whitelist.length = 0; // reset current whitelist
        tagify.loading(true).dropdown.hide.call(tagify) // show the loader animation

        // get new whitelist from a delayed mocked request (Promise)
        mockAjax()
            .then(function (result) {
                // replace tagify "whitelist" array values with new values
                // and add back the ones already choses as Tags
                tagify.settings.whitelist.push(...result, ...tagify.value)

                // render the suggestions dropdown.
                tagify.loading(false).dropdown.show.call(tagify, e.detail.value);
            })
    }
</script>