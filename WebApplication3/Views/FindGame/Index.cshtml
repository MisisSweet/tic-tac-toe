@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "FindGame";
}
<style>
    .wrapper {
        background-image: url("./picturs/fon.png");
        background-size: cover;
        width: 100vw;
        height: 100vh;
        padding-top: 20px;
    }

    html, body, .container {
        height: 100% !important;
        min-width: 100% !important;
        max-width: 100% !important;
        overflow: hidden;
        margin: 0;
        padding: 0;
    }

    .card {
        margin-top: 20px;
    }

    body {
        overflow: auto; /* добавить полосу прокрутки */
    }

    .tagify {
        width: 100%;
        max-width: 700px;
    }
    .some_class_name{
    background-color: azure;
    margin: 0 auto;
    }
</style>
<div class="wrapper">
    <form class="d-flex">
        <input name='tags'
               class='some_class_name'
               placeholder='Введите теги'
               value='' of Objects)
               data-blacklist='.NET,PHP'>
    </form>
    <div class="d-flex justify-content-around flex-wrap">
        <div class="card" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">Игра</h5>
                <p class="card-text">Теги</p>
                <p class="card-text">Количество игроков</p>
                <a href="#" class="btn btn-primary">Присоединиться</a>
            </div>
        </div>
        <div class="card" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">Игра</h5>
                <p class="card-text">Теги</p>
                <p class="card-text">Количество игроков</p>
                <a href="#" class="btn btn-primary">Присоединиться</a>
            </div>
        </div>
        <div class="card" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">Игра</h5>
                <p class="card-text">Теги</p>
                <p class="card-text">Количество игроков</p>
                <a href="#" class="btn btn-primary">Присоединиться</a>
            </div>
        </div>
        <div class="card" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">Игра</h5>
                <p class="card-text">Теги</p>
                <p class="card-text">Количество игроков</p>
                <a href="#" class="btn btn-primary">Присоединиться</a>
            </div>
        </div>
        <div class="card" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">Игра</h5>
                <p class="card-text">Теги</p>
                <p class="card-text">Количество игроков</p>
                <a href="#" class="btn btn-primary">Присоединиться</a>
            </div>
        </div>
        <div class="card" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">Игра</h5>
                <p class="card-text">Теги</p>
                <p class="card-text">Количество игроков</p>
                <a href="#" class="btn btn-primary">Присоединиться</a>
            </div>
        </div>
        <div class="card" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">Игра</h5>
                <p class="card-text">Теги</p>
                <p class="card-text">Количество игроков</p>
                <a href="#" class="btn btn-primary">Присоединиться</a>
            </div>
        </div>
        <div class="card" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">Игра</h5>
                <p class="card-text">Теги</p>
                <p class="card-text">Количество игроков</p>
                <a href="#" class="btn btn-primary">Присоединиться</a>
            </div>
        </div>
    </div>
</div>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/tagify/tagify.min.js"></script>
<script>
    var inputElm = document.querySelector('input[name=tags]'),
        whitelist = ["game", "p2p", "RUS", "ENG", "zero", "cross"]

    // initialize Tagify on the above input node reference
    var tagify = new Tagify(inputElm, {
        enforceWhitelist: true,

        // make an array from the initial input value
        whitelist: inputElm.value.trim().split(/\s*,\s*/)
    })

    // Chainable event listeners
    tagify.on('add', onAddTag)
        .on('remove', onRemoveTag)
        .on('input', onInput)
        .on('edit', onTagEdit)
        .on('invalid', onInvalidTag)
        .on('click', onTagClick)
        .on('focus', onTagifyFocusBlur)
        .on('blur', onTagifyFocusBlur)
        .on('dropdown:hide dropdown:show', e => console.log(e.type))
        .on('dropdown:select', onDropdownSelect)

    var mockAjax = (function mockAjax() {
        var timeout;
        return function (duration) {
            clearTimeout(timeout); // abort last request
            return new Promise(function (resolve, reject) {
                timeout = setTimeout(resolve, duration || 700, whitelist)
            })
        }
    })()

    // tag added callback
    function onAddTag(e) {
        console.log("onAddTag: ", e.detail);
        console.log("original input value: ", inputElm.value)
        tagify.off('add', onAddTag) // exmaple of removing a custom Tagify event
    }

    // tag remvoed callback
    function onRemoveTag(e) {
        console.log("onRemoveTag:", e.detail, "tagify instance value:", tagify.value)
    }

    // on character(s) added/removed (user is typing/deleting)
    function onInput(e) {
        console.log("onInput: ", e.detail);
        tagify.settings.whitelist.length = 0; // reset current whitelist
        tagify.loading(true).dropdown.hide.call(tagify) // show the loader animation

        // get new whitelist from a delayed mocked request (Promise)
        mockAjax()
            .then(function (result) {
                // replace tagify "whitelist" array values with new values
                // and add back the ones already choses as Tags
                tagify.settings.whitelist.push(...result, ...tagify.value)

                // render the suggestions dropdown.
                tagify.loading(false).dropdown.show.call(tagify, e.detail.value);
            })
    }

    function onTagEdit(e) {
        console.log("onTagEdit: ", e.detail);
    }

    // invalid tag added callback
    function onInvalidTag(e) {
        console.log("onInvalidTag: ", e.detail);
    }

    // invalid tag added callback
    function onTagClick(e) {
        console.log(e.detail);
        console.log("onTagClick: ", e.detail);
    }

    function onTagifyFocusBlur(e) {
        console.log(e.type, "event fired")
    }

    function onDropdownSelect(e) {
        console.log("onDropdownSelect: ", e.detail)
    }
</script>